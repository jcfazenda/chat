(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/platform-browser')) :
    typeof define === 'function' && define.amd ? define('angular2-tree-diagram', ['exports', '@angular/common', '@angular/core', '@angular/platform-browser'], factory) :
    (global = global || self, factory(global['angular2-tree-diagram'] = {}, global.ng.common, global.ng.core, global.ng.platformBrowser));
}(this, (function (exports, common, core, platformBrowser) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    var TreeDiagramNode = /** @class */ (function () {
        function TreeDiagramNode(props, config, getThisNodeList) {
            this.getThisNodeList = getThisNodeList;
            if (!props.guid) {
                return;
            }
            for (var prop in props) {
                if (props.hasOwnProperty(prop)) {
                    this[prop] = props[prop];
                }
            }
            this.toggleState = false;
            if (config.nodeWidth) {
                this.width = config.nodeWidth;
            }
            if (config.nodeHeight) {
                this.height = config.nodeHeight;
            }
            this.children = new Set(props.children);
        }
        Object.defineProperty(TreeDiagramNode.prototype, "isMaker", {
            get: function () {
                return false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TreeDiagramNode.prototype, "isExpanded", {
            get: function () {
                return this.toggleState;
            },
            enumerable: true,
            configurable: true
        });
        TreeDiagramNode.prototype.destroy = function () {
            this.getThisNodeList().destroy(this.guid);
        };
        TreeDiagramNode.prototype.hasChildren = function () {
            return !!this.children.size;
        };
        TreeDiagramNode.prototype.toggle = function (state) {
            if (state === void 0) { state = !this.toggleState; }
            this.toggleState = state;
            if (state) {
                this.getThisNodeList().toggleSiblings(this.guid);
            }
        };
        TreeDiagramNode.prototype.childrenCount = function () {
            return this.children.size;
        };
        TreeDiagramNode.prototype.isRoot = function () {
            return this.parentId == null;
        };
        TreeDiagramNode.prototype.dragenter = function (event) {
            event.dataTransfer.dropEffect = 'move';
        };
        TreeDiagramNode.prototype.dragleave = function (event) {
            this.isDragover = false;
        };
        TreeDiagramNode.prototype.dragstart = function (event) {
            event.dataTransfer.effectAllowed = 'move';
            this.isDragging = true;
            this.toggle(false);
            this.getThisNodeList().draggingNodeGuid = this.guid;
        };
        TreeDiagramNode.prototype.dragover = function (event) {
            event.preventDefault();
            if (!this.isDragging) {
                this.isDragover = true;
            }
            event.dataTransfer.dropEffect = 'move';
            return false;
        };
        TreeDiagramNode.prototype.dragend = function () {
            this.isDragover = false;
            this.isDragging = false;
        };
        TreeDiagramNode.prototype.drop = function (event) {
            event.preventDefault();
            var guid = this.getThisNodeList().draggingNodeGuid;
            this.getThisNodeList().transfer(guid, this.guid);
            return false;
        };
        TreeDiagramNode.prototype.addChild = function () {
            var newNodeGuid = this.getThisNodeList().newNode(this.guid);
            this.children.add(newNodeGuid);
            this.toggle(true);
        };
        return TreeDiagramNode;
    }());

    var TreeDiagramNodeMaker = /** @class */ (function (_super) {
        __extends(TreeDiagramNodeMaker, _super);
        function TreeDiagramNodeMaker() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.isMakerState = true;
            return _this;
        }
        Object.defineProperty(TreeDiagramNodeMaker.prototype, "isMaker", {
            get: function () {
                return this.isMakerState;
            },
            enumerable: true,
            configurable: true
        });
        TreeDiagramNodeMaker.prototype.drop = function (event) {
            event.preventDefault();
            var guid = this.getThisNodeList().draggingNodeGuid;
            this.getThisNodeList().rootNode(guid);
            this.displayName = 'New node';
            return false;
        };
        TreeDiagramNodeMaker.prototype.dragenter = function (event) {
            event.dataTransfer.dropEffect = 'move';
            var guid = this.getThisNodeList().draggingNodeGuid;
            var node = this.getThisNodeList().getNode(guid);
            if (node.parentId) {
                this.displayName = 'Root';
            }
        };
        TreeDiagramNodeMaker.prototype.dragover = function (event) {
            event.preventDefault();
            var guid = this.getThisNodeList().draggingNodeGuid;
            var node = this.getThisNodeList().getNode(guid);
            if (!this.isDragging && node.parentId) {
                this.isDragover = true;
                event.dataTransfer.dropEffect = 'move';
            }
            return false;
        };
        TreeDiagramNodeMaker.prototype.dragleave = function (event) {
            this.displayName = 'New node';
            this.isDragover = false;
        };
        return TreeDiagramNodeMaker;
    }(TreeDiagramNode));

    var TreeDiagramNodesList = /** @class */ (function () {
        function TreeDiagramNodesList(nodes, config) {
            var _this = this;
            this.config = config;
            this.nodeTemplate = {
                displayName: 'New node',
                children: [],
                guid: '',
                parentId: null
            };
            this.nodesList = new Map();
            nodes.forEach(function (treeNode) {
                _this.nodesList.set(treeNode.guid, new TreeDiagramNode(treeNode, config, _this.getThisNodeList.bind(_this)));
            });
            this.makeRoots();
            this.makerGuid = this.uuidv4();
            var node = {
                guid: this.makerGuid,
                parentId: 'root',
                children: [],
                displayName: 'New node'
            };
            var maker = new TreeDiagramNodeMaker(node, this.config, this.getThisNodeList.bind(this));
            this.nodesList.set(this.makerGuid, maker);
        }
        TreeDiagramNodesList.prototype.values = function () {
            return this.nodesList.values();
        };
        TreeDiagramNodesList.prototype.getNode = function (guid) {
            return this.nodesList.get(guid);
        };
        TreeDiagramNodesList.prototype.rootNode = function (guid) {
            var node = this.getNode(guid);
            var maker = this.getNode(this.makerGuid);
            node.isDragging = false;
            node.isDragover = false;
            if (node.parentId) {
                var parent_1 = this.getNode(node.parentId);
                parent_1.children.delete(guid);
            }
            node.parentId = null;
            this.makeRoots();
            maker.isDragging = false;
            maker.isDragover = false;
        };
        TreeDiagramNodesList.prototype.transfer = function (originId, targetId) {
            var origin = this.getNode(originId);
            var target = this.getNode(targetId);
            origin.isDragover = false;
            origin.isDragging = false;
            target.isDragover = false;
            if (origin.parentId === targetId || originId === targetId) {
                return;
            }
            var remakeRoots = origin.isRoot();
            if (origin.parentId) {
                var parent_2 = this.getNode(origin.parentId);
                parent_2.children.delete(originId);
                if (!parent_2.hasChildren()) {
                    parent_2.toggle(false);
                }
            }
            target.children.add(originId);
            origin.parentId = targetId;
            if (remakeRoots) {
                this.makeRoots();
            }
            this.serialize();
        };
        TreeDiagramNodesList.prototype.getThisNodeList = function () {
            return this;
        };
        TreeDiagramNodesList.prototype.toggleSiblings = function (guid) {
            var e_1, _a;
            var _this = this;
            var target = this.getNode(guid);
            if (target.parentId) {
                var parent_3 = this.getNode(target.parentId);
                parent_3.children.forEach(function (nodeGuid) {
                    if (nodeGuid === guid) {
                        return;
                    }
                    _this.getNode(nodeGuid).toggle(false);
                });
            }
            else {
                try {
                    for (var _b = __values(this.roots), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var root = _c.value;
                        if (root.guid === guid) {
                            continue;
                        }
                        root.toggle(false);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        };
        TreeDiagramNodesList.prototype.serialize = function () {
            var out = [];
            this.nodesList.forEach(function (node) {
                var json = {
                    guid: node.guid,
                    displayName: node.displayName,
                    parentId: node.parentId,
                    children: Array.from(node.children),
                };
                out.push(json);
            });
            return out;
        };
        TreeDiagramNodesList.prototype.destroy = function (guid) {
            var _this = this;
            var target = this.getNode(guid);
            if (target.parentId) {
                var parent_4 = this.getNode(target.parentId);
                parent_4.children.delete(guid);
            }
            if (target.hasChildren()) {
                target.children.forEach(function (child) {
                    _this.nodesList.delete(child);
                });
            }
            this.nodesList.delete(guid);
        };
        TreeDiagramNodesList.prototype.newNode = function (parentId) {
            if (parentId === void 0) { parentId = null; }
            var nodeTemplate = Object.assign({}, this.nodeTemplate);
            nodeTemplate.guid = this.uuidv4();
            nodeTemplate.parentId = parentId;
            this.nodesList.set(nodeTemplate.guid, new TreeDiagramNode(nodeTemplate, this.config, this.getThisNodeList.bind(this)));
            this.makeRoots();
            return nodeTemplate.guid;
        };
        TreeDiagramNodesList.prototype.uuidv4 = function () {
            // tslint:disable-next-line:only-arrow-functions
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                // tslint:disable-next-line:one-variable-per-declaration no-bitwise
                var r = (Math.random() * 16) | 0, 
                // tslint:disable-next-line:triple-equals no-bitwise
                v = c == 'x' ? r : (r & 0x3) | 0x8;
                return v.toString(16);
            });
        };
        TreeDiagramNodesList.prototype.makeRoots = function () {
            this.roots = Array.from(this.values()).filter(function (node) {
                return node.isRoot();
            });
        };
        return TreeDiagramNodesList;
    }());

    var NodesListService = /** @class */ (function () {
        function NodesListService() {
        }
        NodesListService.prototype.loadNodes = function (nodes, config) {
            this.nodesList = new TreeDiagramNodesList(nodes, config);
            return this.nodesList;
        };
        NodesListService.prototype.getNode = function (guid) {
            return this.nodesList.getNode(guid);
        };
        NodesListService.prototype.newNode = function () {
            this.nodesList.newNode();
        };
        NodesListService.prototype.makerNode = function () {
            return this.nodesList.makerGuid;
        };
        NodesListService.prototype.toJsonString = function () {
            return JSON.stringify(this.nodesList.serialize());
        };
        NodesListService = __decorate([
            core.Injectable()
        ], NodesListService);
        return NodesListService;
    }());

    var TreeComponent = /** @class */ (function () {
        function TreeComponent(nodesSrv, sanitizer) {
            this.nodesSrv = nodesSrv;
            this.sanitizer = sanitizer;
            this.config = {
                nodeWidth: 200,
                nodeHeight: 100
            };
            this.paneDragging = false;
            this.zoom = 1;
            this.paneX = 0;
            this.paneY = 0;
        }
        Object.defineProperty(TreeComponent.prototype, "paneTransform", {
            get: function () {
                return this.paneTransformState;
            },
            set: function (value) {
                this.paneTransformState = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TreeComponent.prototype, "data", {
            set: function (data) {
                if (!data || !Array.isArray(data.json)) {
                    return;
                }
                if (typeof data.config === 'object') {
                    this.config = Object.assign(this.config, data.config);
                }
                this.nodes = this.nodesSrv.loadNodes(data.json, this.config);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TreeComponent.prototype, "nodeMaker", {
            get: function () {
                return this.nodesSrv.makerNode();
            },
            enumerable: true,
            configurable: true
        });
        TreeComponent.prototype.newNode = function () {
            this.nodesSrv.newNode();
        };
        TreeComponent.prototype.onmousedown = function () {
            this.paneDragging = true;
        };
        TreeComponent.prototype.onmousemove = function (event) {
            if (this.paneDragging) {
                var movementX = event.movementX, movementY = event.movementY;
                this.paneX += movementX;
                this.paneY += movementY;
                this.makeTransform();
            }
        };
        TreeComponent.prototype.onmouseup = function () {
            this.paneDragging = false;
        };
        TreeComponent.prototype.makeTransform = function () {
            this.paneTransform = this.sanitizer.bypassSecurityTrustStyle("translate(" + this.paneX + "px, " + this.paneY + "px) scale(" + this.zoom + ")");
        };
        TreeComponent.prototype.preventMouse = function (event) {
            event.stopPropagation();
        };
        TreeComponent.prototype.onmousewheel = function (event) {
            var delta;
            event.preventDefault();
            delta = event.detail || event.wheelDelta;
            this.zoom += delta / 1000 / 2;
            this.zoom = Math.min(Math.max(this.zoom, 0.2), 3);
            this.makeTransform();
        };
        TreeComponent.ctorParameters = function () { return [
            { type: NodesListService },
            { type: platformBrowser.DomSanitizer }
        ]; };
        __decorate([
            core.Input()
        ], TreeComponent.prototype, "data", null);
        TreeComponent = __decorate([
            core.Component({
                // tslint:disable-next-line:component-selector
                selector: 'tree-diagram',
                template: "<div\n  class=\"tree-pane\"\n  (mousedown)=\"onmousedown()\"\n  (mouseup)=\"onmouseup()\"\n  (mousemove)=\"onmousemove($event)\"\n  (mousewheel)=\"onmousewheel($event)\"\n>\n  <div class=\"tree-paning-container\" [style.transform]=\"paneTransform\">\n    <div *ngIf=\"nodes\" class=\"tree-roots-elements\">\n\n      <tree-diagram-node\n        [nodeId]=\"node.guid\"\n        class=\"tree-root tree-node\"\n        (mousedown)=\"preventMouse($event)\"\n        *ngFor=\"let node of nodes.roots\"\n      ></tree-diagram-node>\n\n      <tree-diagram-node\n        [nodeId]=\"nodeMaker\"\n        (click)=\"newNode()\"\n        (mousedown)=\"preventMouse($event)\"\n        class=\"tree-root tree-new-node tree-node\"\n      ></tree-diagram-node>\n\n    </div>\n  </div>\n</div>\n",
                styles: [":host{-webkit-print-color-adjust:exact;position:relative;display:block;-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;height:100vh;text-align:center}.tree-roots-elements{position:relative;text-align:center;display:inline-block;white-space:nowrap;cursor:default!important;font-size:0;-webkit-transform-origin:center;transform-origin:center}.tree-node{position:relative;display:inline-block;margin:15px;vertical-align:top}.tree-node:only-of-type>.line-to{display:none}.tree-pane,.tree-paning-container{position:absolute;left:0;top:0;right:0;bottom:0}"]
            })
        ], TreeComponent);
        return TreeComponent;
    }());

    var NodeComponent = /** @class */ (function () {
        function NodeComponent(nodesSrv, sanitizer) {
            this.nodesSrv = nodesSrv;
            this.sanitizer = sanitizer;
            this.isRtl = document.getElementsByTagName('html')[0].getAttribute('dir') === 'rtl';
        }
        Object.defineProperty(NodeComponent.prototype, "nodeId", {
            set: function (guid) {
                this.node = this.nodesSrv.getNode(guid);
                var calculation = "translate(calc(-50% + " + Math.round(this.node.width / 2) + "px), 45px)";
                if (this.isRtl) {
                    calculation = "translate(calc(50% - " + Math.round(this.node.width / 2) + "px), 45px)";
                }
                this.childrenTransform = this.sanitizer.bypassSecurityTrustStyle(calculation);
            },
            enumerable: true,
            configurable: true
        });
        NodeComponent.prototype.onNodeBlur = function (event, nodeId) {
            var node = this.nodesSrv.getNode(nodeId);
            node.displayName = event.target.innerText;
        };
        NodeComponent.ctorParameters = function () { return [
            { type: NodesListService },
            { type: platformBrowser.DomSanitizer }
        ]; };
        __decorate([
            core.Input()
        ], NodeComponent.prototype, "nodeId", null);
        NodeComponent = __decorate([
            core.Component({
                // tslint:disable-next-line:component-selector
                selector: 'tree-diagram-node',
                template: "<div class=\"line-to\"></div>\n<div\n  id=\"tree-node-{{ node.guid }}\"\n  [ngClass]=\"{\n    'tree-element-container': !0,\n    'tree-element-has-children': node.hasChildren()\n  }\"\n  [style.width.px]=\"node.width\"\n  [style.height.px]=\"node.height\"\n>\n  <div\n    [ngClass]=\"{\n      'tree-element-main': !0,\n      dragover: node.isDragover,\n      expanded: node.isExpanded,\n      dragging: node.isDragging,\n      'tree-new-node': node.isMaker\n    }\"\n    [attr.draggable]=\"node.isMaker ? null : 'true'\"\n    [style.width.px]=\"node.width\"\n    [style.height.px]=\"node.height\"\n    (drop)=\"node.drop($event)\"\n    (dragenter)=\"node.dragenter($event)\"\n    (dragstart)=\"node.dragstart($event)\"\n    (dragover)=\"node.dragover($event)\"\n    (dragend)=\"node.dragend()\"\n    (dragleave)=\"node.dragleave($event)\"\n  >\n    <div\n      class=\"rect\"\n      [style.width.px]=\"node.width\"\n      [style.height.px]=\"node.height\"\n    >\n      <div class=\"buttons\">\n        <div class=\"delete\" (click)=\"node.destroy()\"></div>\n        <div class=\"toggler\" (click)=\"node.toggle()\"></div>\n        <div class=\"add\" (click)=\"node.addChild()\"></div>\n      </div>\n      <div class=\"tree-text tree-text-non-editable\">\n        <span>{{ node.displayName }}</span>\n      </div>\n      <div class=\"tree-text tree-text-editable\">\n        <span\n          contenteditable\n          [innerHtml]=\"node.displayName\"\n          (blur)=\"onNodeBlur($event, node.guid)\"\n        ></span>\n        <span class=\"children-count\"> ({{ node.childrenCount() }})</span>\n      </div>\n    </div>\n  </div>\n  <div\n    class=\"tree-children\"\n    [style.transform]=\"childrenTransform\"\n    *ngIf=\"node.isExpanded\"\n  >\n    <div class=\"tree-elements-group\">\n      <tree-diagram-node\n        *ngFor=\"let child of node.children\"\n        [nodeId]=\"child\"\n        class=\"tree-node tree-child\"\n      ></tree-diagram-node>\n    </div>\n  </div>\n</div>\n",
                styles: [".toggler{position:absolute;left:0;right:0;bottom:-10px;background:#2c4c63;margin:0 auto;display:none;z-index:10;width:20px;height:20px;cursor:pointer;border-radius:2px}.children-count{display:none}.tree-element-has-children>.tree-element-main .toggler{display:block}.tree-element-has-children>.tree-element-main .children-count{display:inline}.tree-element-has-children>.tree-children{display:inline-block}.rect{position:relative;background-color:#fafafa!important;border:1px solid #dadada;box-sizing:border-box;-webkit-print-color-adjust:exact;cursor:default!important;display:-webkit-box;display:flex;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;font-size:15px;border-radius:2px}.tree-element-main{text-align:center;margin:0 auto}.tree-element-main:hover .buttons{display:block}.tree-element-main.expanded .rect{background-color:#bce5ff!important}.tree-element-main.expanded .toggler{-webkit-transform:rotateZ(-45deg);transform:rotateZ(-45deg);background:#427396}.tree-element-main.dragover .rect{box-shadow:0 0 5px #427396}.tree-element-main.dragging .buttons,.tree-element-main.dragging .tree-node:before{display:none!important}.tree-element-container{z-index:100}.tree-children{text-align:center;display:inline-block;position:relative;white-space:nowrap;-webkit-perspective:3000px;perspective:3000px;-webkit-perspective-origin:center bottom;perspective-origin:center bottom}.tree-children:before{content:\"\";width:calc(50% - 1px);position:absolute;height:30px;left:0;top:-45px;border-right:1px solid #dadada;max-width:100%;max-height:100%}.line-to{position:absolute;top:-30px;border-top:1px solid #dadada;width:calc(100% + 30px);display:none}.tree-node{position:relative;display:inline-block;margin:15px;vertical-align:top}.tree-node:before{content:\"\";width:calc(50% - 1px);position:absolute;height:30px;left:0;top:-30px;border-right:1px solid #dadada}.tree-node:only-of-type>.line-to{display:none!important}.buttons{position:absolute;top:0;left:0;right:0;bottom:0;display:none}.buttons .delete{width:20px;height:20px;cursor:pointer;border-radius:2px;background-color:#a34851;position:absolute;right:-10px;top:-10px}.buttons .add{width:20px;height:20px;cursor:pointer;border-radius:2px;background-color:#256947;position:absolute;right:-10px;bottom:-10px}.buttons .add:before{content:\"\";position:absolute;height:12px;width:4px;top:0;left:0;right:0;bottom:0;margin:auto;background-color:#2ba423}.buttons .add:after{content:\"\";position:absolute;width:12px;height:4px;top:0;left:0;right:0;bottom:0;margin:auto;background-color:#2ba423}.tree-text{z-index:10;white-space:pre-line}.tree-text span{cursor:pointer}.tree-elements-group{position:relative}.tree-elements-group>.tree-node.tree-child>.line-to{left:0;display:block}.tree-elements-group>.tree-node.tree-child:first-of-type>.line-to{right:-30px;width:calc(50% + 30px);display:block;left:auto}.tree-elements-group>.tree-node.tree-child:last-of-type>.line-to{left:0;right:auto;width:50%;display:block}.tree-elements-group>.tree-node.tree-child>.tree-child:last-child{margin-right:0}.tree-elements-group>.tree-node.tree-child>.tree-child:first-child{margin-left:0}.tree-text-non-editable{display:none}.tree-new-node .rect{opacity:.5;border:1px dashed #dadada;cursor:pointer!important}.tree-new-node.dragover .rect,.tree-new-node:hover .rect{opacity:1}.tree-new-node .buttons,.tree-new-node .tree-children{display:none!important}.tree-new-node .tree-text-non-editable{display:block}.tree-new-node .tree-text-editable{display:none}"]
            })
        ], NodeComponent);
        return NodeComponent;
    }());

    var TreeDiagramModule = /** @class */ (function () {
        function TreeDiagramModule() {
        }
        TreeDiagramModule = __decorate([
            core.NgModule({
                declarations: [
                    TreeComponent,
                    NodeComponent
                ],
                imports: [
                    common.CommonModule
                ],
                exports: [
                    TreeComponent,
                    NodeComponent
                ],
                providers: [
                    NodesListService
                ]
            })
        ], TreeDiagramModule);
        return TreeDiagramModule;
    }());

    exports.NodeComponent = NodeComponent;
    exports.NodesListService = NodesListService;
    exports.TreeDiagramModule = TreeDiagramModule;
    exports.TreeDiagramNode = TreeDiagramNode;
    exports.TreeDiagramNodeMaker = TreeDiagramNodeMaker;
    exports.TreeDiagramNodesList = TreeDiagramNodesList;
    exports.ɵa = TreeComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular2-tree-diagram.umd.js.map
