import { __decorate } from "tslib";
import { Component, Input } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { NodesListService } from '../services/nodes-list.service';
let NodeComponent = class NodeComponent {
    constructor(nodesSrv, sanitizer) {
        this.nodesSrv = nodesSrv;
        this.sanitizer = sanitizer;
        this.isRtl = document.getElementsByTagName('html')[0].getAttribute('dir') === 'rtl';
    }
    set nodeId(guid) {
        this.node = this.nodesSrv.getNode(guid);
        let calculation = `translate(calc(-50% + ${Math.round(this.node.width / 2)}px), 45px)`;
        if (this.isRtl) {
            calculation = `translate(calc(50% - ${Math.round(this.node.width / 2)}px), 45px)`;
        }
        this.childrenTransform = this.sanitizer.bypassSecurityTrustStyle(calculation);
    }
    onNodeBlur(event, nodeId) {
        const node = this.nodesSrv.getNode(nodeId);
        node.displayName = event.target.innerText;
    }
};
NodeComponent.ctorParameters = () => [
    { type: NodesListService },
    { type: DomSanitizer }
];
__decorate([
    Input()
], NodeComponent.prototype, "nodeId", null);
NodeComponent = __decorate([
    Component({
        // tslint:disable-next-line:component-selector
        selector: 'tree-diagram-node',
        template: "<div class=\"line-to\"></div>\n<div\n  id=\"tree-node-{{ node.guid }}\"\n  [ngClass]=\"{\n    'tree-element-container': !0,\n    'tree-element-has-children': node.hasChildren()\n  }\"\n  [style.width.px]=\"node.width\"\n  [style.height.px]=\"node.height\"\n>\n  <div\n    [ngClass]=\"{\n      'tree-element-main': !0,\n      dragover: node.isDragover,\n      expanded: node.isExpanded,\n      dragging: node.isDragging,\n      'tree-new-node': node.isMaker\n    }\"\n    [attr.draggable]=\"node.isMaker ? null : 'true'\"\n    [style.width.px]=\"node.width\"\n    [style.height.px]=\"node.height\"\n    (drop)=\"node.drop($event)\"\n    (dragenter)=\"node.dragenter($event)\"\n    (dragstart)=\"node.dragstart($event)\"\n    (dragover)=\"node.dragover($event)\"\n    (dragend)=\"node.dragend()\"\n    (dragleave)=\"node.dragleave($event)\"\n  >\n    <div\n      class=\"rect\"\n      [style.width.px]=\"node.width\"\n      [style.height.px]=\"node.height\"\n    >\n      <div class=\"buttons\">\n        <div class=\"delete\" (click)=\"node.destroy()\"></div>\n        <div class=\"toggler\" (click)=\"node.toggle()\"></div>\n        <div class=\"add\" (click)=\"node.addChild()\"></div>\n      </div>\n      <div class=\"tree-text tree-text-non-editable\">\n        <span>{{ node.displayName }}</span>\n      </div>\n      <div class=\"tree-text tree-text-editable\">\n        <span\n          contenteditable\n          [innerHtml]=\"node.displayName\"\n          (blur)=\"onNodeBlur($event, node.guid)\"\n        ></span>\n        <span class=\"children-count\"> ({{ node.childrenCount() }})</span>\n      </div>\n    </div>\n  </div>\n  <div\n    class=\"tree-children\"\n    [style.transform]=\"childrenTransform\"\n    *ngIf=\"node.isExpanded\"\n  >\n    <div class=\"tree-elements-group\">\n      <tree-diagram-node\n        *ngFor=\"let child of node.children\"\n        [nodeId]=\"child\"\n        class=\"tree-node tree-child\"\n      ></tree-diagram-node>\n    </div>\n  </div>\n</div>\n",
        styles: [".toggler{position:absolute;left:0;right:0;bottom:-10px;background:#2c4c63;margin:0 auto;display:none;z-index:10;width:20px;height:20px;cursor:pointer;border-radius:2px}.children-count{display:none}.tree-element-has-children>.tree-element-main .toggler{display:block}.tree-element-has-children>.tree-element-main .children-count{display:inline}.tree-element-has-children>.tree-children{display:inline-block}.rect{position:relative;background-color:#fafafa!important;border:1px solid #dadada;box-sizing:border-box;-webkit-print-color-adjust:exact;cursor:default!important;display:-webkit-box;display:flex;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;font-size:15px;border-radius:2px}.tree-element-main{text-align:center;margin:0 auto}.tree-element-main:hover .buttons{display:block}.tree-element-main.expanded .rect{background-color:#bce5ff!important}.tree-element-main.expanded .toggler{-webkit-transform:rotateZ(-45deg);transform:rotateZ(-45deg);background:#427396}.tree-element-main.dragover .rect{box-shadow:0 0 5px #427396}.tree-element-main.dragging .buttons,.tree-element-main.dragging .tree-node:before{display:none!important}.tree-element-container{z-index:100}.tree-children{text-align:center;display:inline-block;position:relative;white-space:nowrap;-webkit-perspective:3000px;perspective:3000px;-webkit-perspective-origin:center bottom;perspective-origin:center bottom}.tree-children:before{content:\"\";width:calc(50% - 1px);position:absolute;height:30px;left:0;top:-45px;border-right:1px solid #dadada;max-width:100%;max-height:100%}.line-to{position:absolute;top:-30px;border-top:1px solid #dadada;width:calc(100% + 30px);display:none}.tree-node{position:relative;display:inline-block;margin:15px;vertical-align:top}.tree-node:before{content:\"\";width:calc(50% - 1px);position:absolute;height:30px;left:0;top:-30px;border-right:1px solid #dadada}.tree-node:only-of-type>.line-to{display:none!important}.buttons{position:absolute;top:0;left:0;right:0;bottom:0;display:none}.buttons .delete{width:20px;height:20px;cursor:pointer;border-radius:2px;background-color:#a34851;position:absolute;right:-10px;top:-10px}.buttons .add{width:20px;height:20px;cursor:pointer;border-radius:2px;background-color:#256947;position:absolute;right:-10px;bottom:-10px}.buttons .add:before{content:\"\";position:absolute;height:12px;width:4px;top:0;left:0;right:0;bottom:0;margin:auto;background-color:#2ba423}.buttons .add:after{content:\"\";position:absolute;width:12px;height:4px;top:0;left:0;right:0;bottom:0;margin:auto;background-color:#2ba423}.tree-text{z-index:10;white-space:pre-line}.tree-text span{cursor:pointer}.tree-elements-group{position:relative}.tree-elements-group>.tree-node.tree-child>.line-to{left:0;display:block}.tree-elements-group>.tree-node.tree-child:first-of-type>.line-to{right:-30px;width:calc(50% + 30px);display:block;left:auto}.tree-elements-group>.tree-node.tree-child:last-of-type>.line-to{left:0;right:auto;width:50%;display:block}.tree-elements-group>.tree-node.tree-child>.tree-child:last-child{margin-right:0}.tree-elements-group>.tree-node.tree-child>.tree-child:first-child{margin-left:0}.tree-text-non-editable{display:none}.tree-new-node .rect{opacity:.5;border:1px dashed #dadada;cursor:pointer!important}.tree-new-node.dragover .rect,.tree-new-node:hover .rect{opacity:1}.tree-new-node .buttons,.tree-new-node .tree-children{display:none!important}.tree-new-node .tree-text-non-editable{display:block}.tree-new-node .tree-text-editable{display:none}"]
    })
], NodeComponent);
export { NodeComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyMi10cmVlLWRpYWdyYW0vIiwic291cmNlcyI6WyJsaWIvbm9kZS9ub2RlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRXpELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBVWxFLElBQWEsYUFBYSxHQUExQixNQUFhLGFBQWE7SUFLeEIsWUFDVSxRQUEwQixFQUMxQixTQUF1QjtRQUR2QixhQUFRLEdBQVIsUUFBUSxDQUFrQjtRQUMxQixjQUFTLEdBQVQsU0FBUyxDQUFjO1FBRS9CLElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLENBQUM7SUFDdEYsQ0FBQztJQUVRLElBQUksTUFBTSxDQUFDLElBQUk7UUFDdEIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV4QyxJQUFJLFdBQVcsR0FBRyx5QkFBeUIsSUFBSSxDQUFDLEtBQUssQ0FDbkQsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUNwQixZQUFZLENBQUM7UUFFZCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxXQUFXLEdBQUcsd0JBQXdCLElBQUksQ0FBQyxLQUFLLENBQzlDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FDcEIsWUFBWSxDQUFDO1NBQ2Y7UUFFRCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsQ0FDOUQsV0FBVyxDQUNaLENBQUM7SUFDSixDQUFDO0lBRUQsVUFBVSxDQUFDLEtBQUssRUFBRSxNQUFNO1FBQ3RCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTNDLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7SUFDNUMsQ0FBQztDQUNGLENBQUE7O1lBN0JxQixnQkFBZ0I7WUFDZixZQUFZOztBQUt4QjtJQUFSLEtBQUssRUFBRTsyQ0FnQlA7QUE1QlUsYUFBYTtJQU56QixTQUFTLENBQUM7UUFDVCw4Q0FBOEM7UUFDOUMsUUFBUSxFQUFFLG1CQUFtQjtRQUU3Qix5OURBQW9DOztLQUNyQyxDQUFDO0dBQ1csYUFBYSxDQW1DekI7U0FuQ1ksYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERvbVNhbml0aXplciB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuXG5pbXBvcnQgeyBOb2Rlc0xpc3RTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvbm9kZXMtbGlzdC5zZXJ2aWNlJztcbmltcG9ydCB7IFRyZWVEaWFncmFtTm9kZSB9IGZyb20gJy4uL2NsYXNzZXMvbm9kZS5jbGFzcyc7XG5pbXBvcnQgeyBUcmVlRGlhZ3JhbU5vZGVNYWtlciB9IGZyb20gJy4uL2NsYXNzZXMvbm9kZS1tYWtlci5jbGFzcyc7XG5cbkBDb21wb25lbnQoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAndHJlZS1kaWFncmFtLW5vZGUnLFxuICBzdHlsZVVybHM6IFsnLi9ub2RlLmNvbXBvbmVudC5zY3NzJ10sXG4gIHRlbXBsYXRlVXJsOiAnLi9ub2RlLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBOb2RlQ29tcG9uZW50IHtcbiAgcHVibGljIG5vZGU6IFRyZWVEaWFncmFtTm9kZSB8IFRyZWVEaWFncmFtTm9kZU1ha2VyO1xuICBwdWJsaWMgY2hpbGRyZW5UcmFuc2Zvcm07XG4gIHByaXZhdGUgcmVhZG9ubHkgaXNSdGw6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBub2Rlc1NydjogTm9kZXNMaXN0U2VydmljZSxcbiAgICBwcml2YXRlIHNhbml0aXplcjogRG9tU2FuaXRpemVyXG4gICkge1xuICAgIHRoaXMuaXNSdGwgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaHRtbCcpWzBdLmdldEF0dHJpYnV0ZSgnZGlyJykgPT09ICdydGwnO1xuICB9XG5cbiAgQElucHV0KCkgc2V0IG5vZGVJZChndWlkKSB7XG4gICAgdGhpcy5ub2RlID0gdGhpcy5ub2Rlc1Nydi5nZXROb2RlKGd1aWQpO1xuXG4gICAgbGV0IGNhbGN1bGF0aW9uID0gYHRyYW5zbGF0ZShjYWxjKC01MCUgKyAke01hdGgucm91bmQoXG4gICAgICB0aGlzLm5vZGUud2lkdGggLyAyXG4gICAgKX1weCksIDQ1cHgpYDtcblxuICAgIGlmICh0aGlzLmlzUnRsKSB7XG4gICAgICBjYWxjdWxhdGlvbiA9IGB0cmFuc2xhdGUoY2FsYyg1MCUgLSAke01hdGgucm91bmQoXG4gICAgICAgIHRoaXMubm9kZS53aWR0aCAvIDJcbiAgICAgICl9cHgpLCA0NXB4KWA7XG4gICAgfVxuXG4gICAgdGhpcy5jaGlsZHJlblRyYW5zZm9ybSA9IHRoaXMuc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RTdHlsZShcbiAgICAgIGNhbGN1bGF0aW9uXG4gICAgKTtcbiAgfVxuXG4gIG9uTm9kZUJsdXIoZXZlbnQsIG5vZGVJZCkge1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLm5vZGVzU3J2LmdldE5vZGUobm9kZUlkKTtcblxuICAgIG5vZGUuZGlzcGxheU5hbWUgPSBldmVudC50YXJnZXQuaW5uZXJUZXh0O1xuICB9XG59XG4iXX0=