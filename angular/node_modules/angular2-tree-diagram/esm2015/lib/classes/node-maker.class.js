import { TreeDiagramNode } from './node.class';
export class TreeDiagramNodeMaker extends TreeDiagramNode {
    constructor() {
        super(...arguments);
        this.isMakerState = true;
    }
    get isMaker() {
        return this.isMakerState;
    }
    drop(event) {
        event.preventDefault();
        const guid = this.getThisNodeList().draggingNodeGuid;
        this.getThisNodeList().rootNode(guid);
        this.displayName = 'New node';
        return false;
    }
    dragenter(event) {
        event.dataTransfer.dropEffect = 'move';
        const guid = this.getThisNodeList().draggingNodeGuid;
        const node = this.getThisNodeList().getNode(guid);
        if (node.parentId) {
            this.displayName = 'Root';
        }
    }
    dragover(event) {
        event.preventDefault();
        const guid = this.getThisNodeList().draggingNodeGuid;
        const node = this.getThisNodeList().getNode(guid);
        if (!this.isDragging && node.parentId) {
            this.isDragover = true;
            event.dataTransfer.dropEffect = 'move';
        }
        return false;
    }
    dragleave(event) {
        this.displayName = 'New node';
        this.isDragover = false;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS1tYWtlci5jbGFzcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXIyLXRyZWUtZGlhZ3JhbS8iLCJzb3VyY2VzIjpbImxpYi9jbGFzc2VzL25vZGUtbWFrZXIuY2xhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUUvQyxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsZUFBZTtJQUF6RDs7UUFDVSxpQkFBWSxHQUFHLElBQUksQ0FBQztJQThDOUIsQ0FBQztJQTVDQyxJQUFXLE9BQU87UUFDaEIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzNCLENBQUM7SUFFTSxJQUFJLENBQUMsS0FBSztRQUNmLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUV2QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsZ0JBQWdCLENBQUM7UUFFckQsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQztRQUU5QixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFTSxTQUFTLENBQUMsS0FBSztRQUNwQixLQUFLLENBQUMsWUFBWSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7UUFFdkMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLGdCQUFnQixDQUFDO1FBQ3JELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbEQsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDO1NBQzNCO0lBQ0gsQ0FBQztJQUVNLFFBQVEsQ0FBQyxLQUFLO1FBQ25CLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUV2QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsZ0JBQWdCLENBQUM7UUFDckQsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVsRCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ3JDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1lBQ3ZCLEtBQUssQ0FBQyxZQUFZLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQztTQUN4QztRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVNLFNBQVMsQ0FBQyxLQUFLO1FBQ3BCLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDO1FBQzlCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO0lBQzFCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyZWVEaWFncmFtTm9kZSB9IGZyb20gJy4vbm9kZS5jbGFzcyc7XG5cbmV4cG9ydCBjbGFzcyBUcmVlRGlhZ3JhbU5vZGVNYWtlciBleHRlbmRzIFRyZWVEaWFncmFtTm9kZSB7XG4gIHByaXZhdGUgaXNNYWtlclN0YXRlID0gdHJ1ZTtcblxuICBwdWJsaWMgZ2V0IGlzTWFrZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNNYWtlclN0YXRlO1xuICB9XG5cbiAgcHVibGljIGRyb3AoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgY29uc3QgZ3VpZCA9IHRoaXMuZ2V0VGhpc05vZGVMaXN0KCkuZHJhZ2dpbmdOb2RlR3VpZDtcblxuICAgIHRoaXMuZ2V0VGhpc05vZGVMaXN0KCkucm9vdE5vZGUoZ3VpZCk7XG4gICAgdGhpcy5kaXNwbGF5TmFtZSA9ICdOZXcgbm9kZSc7XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgZHJhZ2VudGVyKGV2ZW50KSB7XG4gICAgZXZlbnQuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QgPSAnbW92ZSc7XG5cbiAgICBjb25zdCBndWlkID0gdGhpcy5nZXRUaGlzTm9kZUxpc3QoKS5kcmFnZ2luZ05vZGVHdWlkO1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLmdldFRoaXNOb2RlTGlzdCgpLmdldE5vZGUoZ3VpZCk7XG5cbiAgICBpZiAobm9kZS5wYXJlbnRJZCkge1xuICAgICAgdGhpcy5kaXNwbGF5TmFtZSA9ICdSb290JztcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZHJhZ292ZXIoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgY29uc3QgZ3VpZCA9IHRoaXMuZ2V0VGhpc05vZGVMaXN0KCkuZHJhZ2dpbmdOb2RlR3VpZDtcbiAgICBjb25zdCBub2RlID0gdGhpcy5nZXRUaGlzTm9kZUxpc3QoKS5nZXROb2RlKGd1aWQpO1xuXG4gICAgaWYgKCF0aGlzLmlzRHJhZ2dpbmcgJiYgbm9kZS5wYXJlbnRJZCkge1xuICAgICAgdGhpcy5pc0RyYWdvdmVyID0gdHJ1ZTtcbiAgICAgIGV2ZW50LmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gJ21vdmUnO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHB1YmxpYyBkcmFnbGVhdmUoZXZlbnQpIHtcbiAgICB0aGlzLmRpc3BsYXlOYW1lID0gJ05ldyBub2RlJztcbiAgICB0aGlzLmlzRHJhZ292ZXIgPSBmYWxzZTtcbiAgfVxufVxuIl19