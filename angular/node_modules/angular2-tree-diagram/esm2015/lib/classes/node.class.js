export class TreeDiagramNode {
    constructor(props, config, getThisNodeList) {
        this.getThisNodeList = getThisNodeList;
        if (!props.guid) {
            return;
        }
        for (const prop in props) {
            if (props.hasOwnProperty(prop)) {
                this[prop] = props[prop];
            }
        }
        this.toggleState = false;
        if (config.nodeWidth) {
            this.width = config.nodeWidth;
        }
        if (config.nodeHeight) {
            this.height = config.nodeHeight;
        }
        this.children = new Set(props.children);
    }
    get isMaker() {
        return false;
    }
    get isExpanded() {
        return this.toggleState;
    }
    destroy() {
        this.getThisNodeList().destroy(this.guid);
    }
    hasChildren() {
        return !!this.children.size;
    }
    toggle(state = !this.toggleState) {
        this.toggleState = state;
        if (state) {
            this.getThisNodeList().toggleSiblings(this.guid);
        }
    }
    childrenCount() {
        return this.children.size;
    }
    isRoot() {
        return this.parentId == null;
    }
    dragenter(event) {
        event.dataTransfer.dropEffect = 'move';
    }
    dragleave(event) {
        this.isDragover = false;
    }
    dragstart(event) {
        event.dataTransfer.effectAllowed = 'move';
        this.isDragging = true;
        this.toggle(false);
        this.getThisNodeList().draggingNodeGuid = this.guid;
    }
    dragover(event) {
        event.preventDefault();
        if (!this.isDragging) {
            this.isDragover = true;
        }
        event.dataTransfer.dropEffect = 'move';
        return false;
    }
    dragend() {
        this.isDragover = false;
        this.isDragging = false;
    }
    drop(event) {
        event.preventDefault();
        const guid = this.getThisNodeList().draggingNodeGuid;
        this.getThisNodeList().transfer(guid, this.guid);
        return false;
    }
    addChild() {
        const newNodeGuid = this.getThisNodeList().newNode(this.guid);
        this.children.add(newNodeGuid);
        this.toggle(true);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS5jbGFzcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXIyLXRyZWUtZGlhZ3JhbS8iLCJzb3VyY2VzIjpbImxpYi9jbGFzc2VzL25vZGUuY2xhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxPQUFPLGVBQWU7SUFlMUIsWUFDRSxLQUFLLEVBQ0wsTUFBTSxFQUNDLGVBQTJDO1FBQTNDLG9CQUFlLEdBQWYsZUFBZSxDQUE0QjtRQUVsRCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtZQUNmLE9BQU87U0FDUjtRQUVELEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1lBQ3hCLElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUMxQjtTQUNGO1FBRUQsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFFekIsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztTQUMvQjtRQUVELElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRTtZQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUM7U0FDakM7UUFFRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFvQixDQUFDLENBQUM7SUFDdEQsQ0FBQztJQTlCRCxJQUFXLE9BQU87UUFDaEIsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBOEJELElBQVcsVUFBVTtRQUNuQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQztJQUVNLE9BQU87UUFDWixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRU0sV0FBVztRQUNoQixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztJQUM5QixDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXO1FBQ3JDLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBRXpCLElBQUksS0FBSyxFQUFFO1lBQ1QsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbEQ7SUFDSCxDQUFDO0lBRU0sYUFBYTtRQUNsQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO0lBQzVCLENBQUM7SUFFTSxNQUFNO1FBQ1gsT0FBTyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQztJQUMvQixDQUFDO0lBRU0sU0FBUyxDQUFDLEtBQUs7UUFDcEIsS0FBSyxDQUFDLFlBQVksQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQ3pDLENBQUM7SUFFTSxTQUFTLENBQUMsS0FBSztRQUNwQixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztJQUMxQixDQUFDO0lBRU0sU0FBUyxDQUFDLEtBQUs7UUFDcEIsS0FBSyxDQUFDLFlBQVksQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDO1FBQzFDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDdEQsQ0FBQztJQUVNLFFBQVEsQ0FBQyxLQUFLO1FBQ25CLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUV2QixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNwQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztTQUN4QjtRQUVELEtBQUssQ0FBQyxZQUFZLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQztRQUN2QyxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFTSxPQUFPO1FBQ1osSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDeEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7SUFDMUIsQ0FBQztJQUVNLElBQUksQ0FBQyxLQUFLO1FBQ2YsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBRXZCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztRQUVyRCxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRU0sUUFBUTtRQUNiLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTlELElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHJlZURpYWdyYW1Ob2Rlc0xpc3QgfSBmcm9tICcuL25vZGVzLWxpc3QuY2xhc3MnO1xuXG5leHBvcnQgY2xhc3MgVHJlZURpYWdyYW1Ob2RlIHtcbiAgcHVibGljIHBhcmVudElkOiBzdHJpbmcgfCBudWxsO1xuICBwdWJsaWMgZ3VpZDogc3RyaW5nO1xuICBwdWJsaWMgd2lkdGg6IG51bWJlcjtcbiAgcHVibGljIGhlaWdodDogbnVtYmVyO1xuICBwdWJsaWMgaXNEcmFnb3ZlcjogYm9vbGVhbjtcbiAgcHVibGljIGlzRHJhZ2dpbmc6IGJvb2xlYW47XG4gIHB1YmxpYyBjaGlsZHJlbjogU2V0PHN0cmluZz47XG4gIHB1YmxpYyBkaXNwbGF5TmFtZTogc3RyaW5nO1xuICBwcml2YXRlIHRvZ2dsZVN0YXRlOiBib29sZWFuO1xuXG4gIHB1YmxpYyBnZXQgaXNNYWtlcigpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm9wcyxcbiAgICBjb25maWcsXG4gICAgcHVibGljIGdldFRoaXNOb2RlTGlzdDogKCkgPT4gVHJlZURpYWdyYW1Ob2Rlc0xpc3RcbiAgKSB7XG4gICAgaWYgKCFwcm9wcy5ndWlkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBwcm9wIGluIHByb3BzKSB7XG4gICAgICBpZiAocHJvcHMuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgdGhpc1twcm9wXSA9IHByb3BzW3Byb3BdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudG9nZ2xlU3RhdGUgPSBmYWxzZTtcblxuICAgIGlmIChjb25maWcubm9kZVdpZHRoKSB7XG4gICAgICB0aGlzLndpZHRoID0gY29uZmlnLm5vZGVXaWR0aDtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLm5vZGVIZWlnaHQpIHtcbiAgICAgIHRoaXMuaGVpZ2h0ID0gY29uZmlnLm5vZGVIZWlnaHQ7XG4gICAgfVxuXG4gICAgdGhpcy5jaGlsZHJlbiA9IG5ldyBTZXQocHJvcHMuY2hpbGRyZW4gYXMgc3RyaW5nW10pO1xuICB9XG5cbiAgcHVibGljIGdldCBpc0V4cGFuZGVkKCkge1xuICAgIHJldHVybiB0aGlzLnRvZ2dsZVN0YXRlO1xuICB9XG5cbiAgcHVibGljIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5nZXRUaGlzTm9kZUxpc3QoKS5kZXN0cm95KHRoaXMuZ3VpZCk7XG4gIH1cblxuICBwdWJsaWMgaGFzQ2hpbGRyZW4oKSB7XG4gICAgcmV0dXJuICEhdGhpcy5jaGlsZHJlbi5zaXplO1xuICB9XG5cbiAgcHVibGljIHRvZ2dsZShzdGF0ZSA9ICF0aGlzLnRvZ2dsZVN0YXRlKSB7XG4gICAgdGhpcy50b2dnbGVTdGF0ZSA9IHN0YXRlO1xuXG4gICAgaWYgKHN0YXRlKSB7XG4gICAgICB0aGlzLmdldFRoaXNOb2RlTGlzdCgpLnRvZ2dsZVNpYmxpbmdzKHRoaXMuZ3VpZCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGNoaWxkcmVuQ291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4uc2l6ZTtcbiAgfVxuXG4gIHB1YmxpYyBpc1Jvb3QoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyZW50SWQgPT0gbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyBkcmFnZW50ZXIoZXZlbnQpIHtcbiAgICBldmVudC5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9ICdtb3ZlJztcbiAgfVxuXG4gIHB1YmxpYyBkcmFnbGVhdmUoZXZlbnQpIHtcbiAgICB0aGlzLmlzRHJhZ292ZXIgPSBmYWxzZTtcbiAgfVxuXG4gIHB1YmxpYyBkcmFnc3RhcnQoZXZlbnQpIHtcbiAgICBldmVudC5kYXRhVHJhbnNmZXIuZWZmZWN0QWxsb3dlZCA9ICdtb3ZlJztcbiAgICB0aGlzLmlzRHJhZ2dpbmcgPSB0cnVlO1xuICAgIHRoaXMudG9nZ2xlKGZhbHNlKTtcbiAgICB0aGlzLmdldFRoaXNOb2RlTGlzdCgpLmRyYWdnaW5nTm9kZUd1aWQgPSB0aGlzLmd1aWQ7XG4gIH1cblxuICBwdWJsaWMgZHJhZ292ZXIoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgaWYgKCF0aGlzLmlzRHJhZ2dpbmcpIHtcbiAgICAgIHRoaXMuaXNEcmFnb3ZlciA9IHRydWU7XG4gICAgfVxuXG4gICAgZXZlbnQuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QgPSAnbW92ZSc7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcHVibGljIGRyYWdlbmQoKSB7XG4gICAgdGhpcy5pc0RyYWdvdmVyID0gZmFsc2U7XG4gICAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgZHJvcChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBjb25zdCBndWlkID0gdGhpcy5nZXRUaGlzTm9kZUxpc3QoKS5kcmFnZ2luZ05vZGVHdWlkO1xuXG4gICAgdGhpcy5nZXRUaGlzTm9kZUxpc3QoKS50cmFuc2ZlcihndWlkLCB0aGlzLmd1aWQpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHB1YmxpYyBhZGRDaGlsZCgpIHtcbiAgICBjb25zdCBuZXdOb2RlR3VpZCA9IHRoaXMuZ2V0VGhpc05vZGVMaXN0KCkubmV3Tm9kZSh0aGlzLmd1aWQpO1xuXG4gICAgdGhpcy5jaGlsZHJlbi5hZGQobmV3Tm9kZUd1aWQpO1xuICAgIHRoaXMudG9nZ2xlKHRydWUpO1xuICB9XG59XG4iXX0=