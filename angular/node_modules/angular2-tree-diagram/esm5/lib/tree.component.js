import { __decorate } from "tslib";
import { Component, Input } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { NodesListService } from './services/nodes-list.service';
var TreeComponent = /** @class */ (function () {
    function TreeComponent(nodesSrv, sanitizer) {
        this.nodesSrv = nodesSrv;
        this.sanitizer = sanitizer;
        this.config = {
            nodeWidth: 200,
            nodeHeight: 100
        };
        this.paneDragging = false;
        this.zoom = 1;
        this.paneX = 0;
        this.paneY = 0;
    }
    Object.defineProperty(TreeComponent.prototype, "paneTransform", {
        get: function () {
            return this.paneTransformState;
        },
        set: function (value) {
            this.paneTransformState = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeComponent.prototype, "data", {
        set: function (data) {
            if (!data || !Array.isArray(data.json)) {
                return;
            }
            if (typeof data.config === 'object') {
                this.config = Object.assign(this.config, data.config);
            }
            this.nodes = this.nodesSrv.loadNodes(data.json, this.config);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeComponent.prototype, "nodeMaker", {
        get: function () {
            return this.nodesSrv.makerNode();
        },
        enumerable: true,
        configurable: true
    });
    TreeComponent.prototype.newNode = function () {
        this.nodesSrv.newNode();
    };
    TreeComponent.prototype.onmousedown = function () {
        this.paneDragging = true;
    };
    TreeComponent.prototype.onmousemove = function (event) {
        if (this.paneDragging) {
            var movementX = event.movementX, movementY = event.movementY;
            this.paneX += movementX;
            this.paneY += movementY;
            this.makeTransform();
        }
    };
    TreeComponent.prototype.onmouseup = function () {
        this.paneDragging = false;
    };
    TreeComponent.prototype.makeTransform = function () {
        this.paneTransform = this.sanitizer.bypassSecurityTrustStyle("translate(" + this.paneX + "px, " + this.paneY + "px) scale(" + this.zoom + ")");
    };
    TreeComponent.prototype.preventMouse = function (event) {
        event.stopPropagation();
    };
    TreeComponent.prototype.onmousewheel = function (event) {
        var delta;
        event.preventDefault();
        delta = event.detail || event.wheelDelta;
        this.zoom += delta / 1000 / 2;
        this.zoom = Math.min(Math.max(this.zoom, 0.2), 3);
        this.makeTransform();
    };
    TreeComponent.ctorParameters = function () { return [
        { type: NodesListService },
        { type: DomSanitizer }
    ]; };
    __decorate([
        Input()
    ], TreeComponent.prototype, "data", null);
    TreeComponent = __decorate([
        Component({
            // tslint:disable-next-line:component-selector
            selector: 'tree-diagram',
            template: "<div\n  class=\"tree-pane\"\n  (mousedown)=\"onmousedown()\"\n  (mouseup)=\"onmouseup()\"\n  (mousemove)=\"onmousemove($event)\"\n  (mousewheel)=\"onmousewheel($event)\"\n>\n  <div class=\"tree-paning-container\" [style.transform]=\"paneTransform\">\n    <div *ngIf=\"nodes\" class=\"tree-roots-elements\">\n\n      <tree-diagram-node\n        [nodeId]=\"node.guid\"\n        class=\"tree-root tree-node\"\n        (mousedown)=\"preventMouse($event)\"\n        *ngFor=\"let node of nodes.roots\"\n      ></tree-diagram-node>\n\n      <tree-diagram-node\n        [nodeId]=\"nodeMaker\"\n        (click)=\"newNode()\"\n        (mousedown)=\"preventMouse($event)\"\n        class=\"tree-root tree-new-node tree-node\"\n      ></tree-diagram-node>\n\n    </div>\n  </div>\n</div>\n",
            styles: [":host{-webkit-print-color-adjust:exact;position:relative;display:block;-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;height:100vh;text-align:center}.tree-roots-elements{position:relative;text-align:center;display:inline-block;white-space:nowrap;cursor:default!important;font-size:0;-webkit-transform-origin:center;transform-origin:center}.tree-node{position:relative;display:inline-block;margin:15px;vertical-align:top}.tree-node:only-of-type>.line-to{display:none}.tree-pane,.tree-paning-container{position:absolute;left:0;top:0;right:0;bottom:0}"]
        })
    ], TreeComponent);
    return TreeComponent;
}());
export { TreeComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyMi10cmVlLWRpYWdyYW0vIiwic291cmNlcyI6WyJsaWIvdHJlZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUV6RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQVFqRTtJQW9CRSx1QkFDVSxRQUEwQixFQUMxQixTQUF1QjtRQUR2QixhQUFRLEdBQVIsUUFBUSxDQUFrQjtRQUMxQixjQUFTLEdBQVQsU0FBUyxDQUFjO1FBcEJ6QixXQUFNLEdBQUc7WUFDZixTQUFTLEVBQUUsR0FBRztZQUNkLFVBQVUsRUFBRSxHQUFHO1NBQ2hCLENBQUM7UUFDTSxpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUVyQixTQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQ1QsVUFBSyxHQUFHLENBQUMsQ0FBQztRQUNWLFVBQUssR0FBRyxDQUFDLENBQUM7SUFhZixDQUFDO0lBWEosc0JBQVcsd0NBQWE7YUFBeEI7WUFDRSxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztRQUNqQyxDQUFDO2FBRUQsVUFBeUIsS0FBSztZQUM1QixJQUFJLENBQUMsa0JBQWtCLEdBQUcsS0FBSyxDQUFDO1FBQ2xDLENBQUM7OztPQUpBO0lBV1Esc0JBQUksK0JBQUk7YUFBUixVQUFTLElBQWtDO1lBQ2xELElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDdEMsT0FBTzthQUNSO1lBRUQsSUFBSSxPQUFPLElBQUksQ0FBQyxNQUFNLEtBQUssUUFBUSxFQUFFO2dCQUNuQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDdkQ7WUFFRCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9ELENBQUM7OztPQUFBO0lBRUQsc0JBQVcsb0NBQVM7YUFBcEI7WUFDRSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDbkMsQ0FBQzs7O09BQUE7SUFFTSwrQkFBTyxHQUFkO1FBQ0UsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRU0sbUNBQVcsR0FBbEI7UUFDRSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztJQUMzQixDQUFDO0lBRU0sbUNBQVcsR0FBbEIsVUFBbUIsS0FBSztRQUN0QixJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDYixJQUFBLDJCQUFTLEVBQUUsMkJBQVMsQ0FBVztZQUV2QyxJQUFJLENBQUMsS0FBSyxJQUFJLFNBQVMsQ0FBQztZQUN4QixJQUFJLENBQUMsS0FBSyxJQUFJLFNBQVMsQ0FBQztZQUN4QixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDdEI7SUFDSCxDQUFDO0lBRU0saUNBQVMsR0FBaEI7UUFDRSxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztJQUM1QixDQUFDO0lBRU0scUNBQWEsR0FBcEI7UUFDRSxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsd0JBQXdCLENBQzFELGVBQWEsSUFBSSxDQUFDLEtBQUssWUFBTyxJQUFJLENBQUMsS0FBSyxrQkFBYSxJQUFJLENBQUMsSUFBSSxNQUFHLENBQ2xFLENBQUM7SUFDSixDQUFDO0lBRU0sb0NBQVksR0FBbkIsVUFBb0IsS0FBSztRQUN2QixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVNLG9DQUFZLEdBQW5CLFVBQW9CLEtBQUs7UUFDdkIsSUFBSSxLQUFLLENBQUM7UUFFVixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQztRQUN6QyxJQUFJLENBQUMsSUFBSSxJQUFJLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFbEQsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7O2dCQTdEbUIsZ0JBQWdCO2dCQUNmLFlBQVk7O0lBR3hCO1FBQVIsS0FBSyxFQUFFOzZDQVVQO0lBbkNVLGFBQWE7UUFOekIsU0FBUyxDQUFDO1lBQ1QsOENBQThDO1lBQzlDLFFBQVEsRUFBRSxjQUFjO1lBRXhCLHF4QkFBb0M7O1NBQ3JDLENBQUM7T0FDVyxhQUFhLENBbUZ6QjtJQUFELG9CQUFDO0NBQUEsQUFuRkQsSUFtRkM7U0FuRlksYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERvbVNhbml0aXplciB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuXG5pbXBvcnQgeyBOb2Rlc0xpc3RTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9ub2Rlcy1saXN0LnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ3RyZWUtZGlhZ3JhbScsXG4gIHN0eWxlVXJsczogWycuL3RyZWUuY29tcG9uZW50LnNjc3MnXSxcbiAgdGVtcGxhdGVVcmw6ICcuL3RyZWUuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFRyZWVDb21wb25lbnQge1xuICBwdWJsaWMgbm9kZXM7XG4gIHByaXZhdGUgY29uZmlnID0ge1xuICAgIG5vZGVXaWR0aDogMjAwLFxuICAgIG5vZGVIZWlnaHQ6IDEwMFxuICB9O1xuICBwcml2YXRlIHBhbmVEcmFnZ2luZyA9IGZhbHNlO1xuICBwcml2YXRlIHBhbmVUcmFuc2Zvcm1TdGF0ZTtcbiAgcHJpdmF0ZSB6b29tID0gMTtcbiAgcHJpdmF0ZSBwYW5lWCA9IDA7XG4gIHByaXZhdGUgcGFuZVkgPSAwO1xuXG4gIHB1YmxpYyBnZXQgcGFuZVRyYW5zZm9ybSgpIHtcbiAgICByZXR1cm4gdGhpcy5wYW5lVHJhbnNmb3JtU3RhdGU7XG4gIH1cblxuICBwdWJsaWMgc2V0IHBhbmVUcmFuc2Zvcm0odmFsdWUpIHtcbiAgICB0aGlzLnBhbmVUcmFuc2Zvcm1TdGF0ZSA9IHZhbHVlO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBub2Rlc1NydjogTm9kZXNMaXN0U2VydmljZSxcbiAgICBwcml2YXRlIHNhbml0aXplcjogRG9tU2FuaXRpemVyXG4gICkge31cblxuICBASW5wdXQoKSBzZXQgZGF0YShkYXRhOiB7IGNvbmZpZzogYW55OyBqc29uOiBhbnlbXSB9KSB7XG4gICAgaWYgKCFkYXRhIHx8ICFBcnJheS5pc0FycmF5KGRhdGEuanNvbikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGRhdGEuY29uZmlnID09PSAnb2JqZWN0Jykge1xuICAgICAgdGhpcy5jb25maWcgPSBPYmplY3QuYXNzaWduKHRoaXMuY29uZmlnLCBkYXRhLmNvbmZpZyk7XG4gICAgfVxuXG4gICAgdGhpcy5ub2RlcyA9IHRoaXMubm9kZXNTcnYubG9hZE5vZGVzKGRhdGEuanNvbiwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgcHVibGljIGdldCBub2RlTWFrZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZXNTcnYubWFrZXJOb2RlKCk7XG4gIH1cblxuICBwdWJsaWMgbmV3Tm9kZSgpIHtcbiAgICB0aGlzLm5vZGVzU3J2Lm5ld05vZGUoKTtcbiAgfVxuXG4gIHB1YmxpYyBvbm1vdXNlZG93bigpIHtcbiAgICB0aGlzLnBhbmVEcmFnZ2luZyA9IHRydWU7XG4gIH1cblxuICBwdWJsaWMgb25tb3VzZW1vdmUoZXZlbnQpIHtcbiAgICBpZiAodGhpcy5wYW5lRHJhZ2dpbmcpIHtcbiAgICAgIGNvbnN0IHsgbW92ZW1lbnRYLCBtb3ZlbWVudFkgfSA9IGV2ZW50O1xuXG4gICAgICB0aGlzLnBhbmVYICs9IG1vdmVtZW50WDtcbiAgICAgIHRoaXMucGFuZVkgKz0gbW92ZW1lbnRZO1xuICAgICAgdGhpcy5tYWtlVHJhbnNmb3JtKCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIG9ubW91c2V1cCgpIHtcbiAgICB0aGlzLnBhbmVEcmFnZ2luZyA9IGZhbHNlO1xuICB9XG5cbiAgcHVibGljIG1ha2VUcmFuc2Zvcm0oKSB7XG4gICAgdGhpcy5wYW5lVHJhbnNmb3JtID0gdGhpcy5zYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdFN0eWxlKFxuICAgICAgYHRyYW5zbGF0ZSgke3RoaXMucGFuZVh9cHgsICR7dGhpcy5wYW5lWX1weCkgc2NhbGUoJHt0aGlzLnpvb219KWBcbiAgICApO1xuICB9XG5cbiAgcHVibGljIHByZXZlbnRNb3VzZShldmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICB9XG5cbiAgcHVibGljIG9ubW91c2V3aGVlbChldmVudCkge1xuICAgIGxldCBkZWx0YTtcblxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZGVsdGEgPSBldmVudC5kZXRhaWwgfHwgZXZlbnQud2hlZWxEZWx0YTtcbiAgICB0aGlzLnpvb20gKz0gZGVsdGEgLyAxMDAwIC8gMjtcbiAgICB0aGlzLnpvb20gPSBNYXRoLm1pbihNYXRoLm1heCh0aGlzLnpvb20sIDAuMiksIDMpO1xuXG4gICAgdGhpcy5tYWtlVHJhbnNmb3JtKCk7XG4gIH1cbn1cbiJdfQ==