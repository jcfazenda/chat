import { __extends } from "tslib";
import { TreeDiagramNode } from './node.class';
var TreeDiagramNodeMaker = /** @class */ (function (_super) {
    __extends(TreeDiagramNodeMaker, _super);
    function TreeDiagramNodeMaker() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isMakerState = true;
        return _this;
    }
    Object.defineProperty(TreeDiagramNodeMaker.prototype, "isMaker", {
        get: function () {
            return this.isMakerState;
        },
        enumerable: true,
        configurable: true
    });
    TreeDiagramNodeMaker.prototype.drop = function (event) {
        event.preventDefault();
        var guid = this.getThisNodeList().draggingNodeGuid;
        this.getThisNodeList().rootNode(guid);
        this.displayName = 'New node';
        return false;
    };
    TreeDiagramNodeMaker.prototype.dragenter = function (event) {
        event.dataTransfer.dropEffect = 'move';
        var guid = this.getThisNodeList().draggingNodeGuid;
        var node = this.getThisNodeList().getNode(guid);
        if (node.parentId) {
            this.displayName = 'Root';
        }
    };
    TreeDiagramNodeMaker.prototype.dragover = function (event) {
        event.preventDefault();
        var guid = this.getThisNodeList().draggingNodeGuid;
        var node = this.getThisNodeList().getNode(guid);
        if (!this.isDragging && node.parentId) {
            this.isDragover = true;
            event.dataTransfer.dropEffect = 'move';
        }
        return false;
    };
    TreeDiagramNodeMaker.prototype.dragleave = function (event) {
        this.displayName = 'New node';
        this.isDragover = false;
    };
    return TreeDiagramNodeMaker;
}(TreeDiagramNode));
export { TreeDiagramNodeMaker };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS1tYWtlci5jbGFzcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXIyLXRyZWUtZGlhZ3JhbS8iLCJzb3VyY2VzIjpbImxpYi9jbGFzc2VzL25vZGUtbWFrZXIuY2xhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFL0M7SUFBMEMsd0NBQWU7SUFBekQ7UUFBQSxxRUErQ0M7UUE5Q1Msa0JBQVksR0FBRyxJQUFJLENBQUM7O0lBOEM5QixDQUFDO0lBNUNDLHNCQUFXLHlDQUFPO2FBQWxCO1lBQ0UsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQzNCLENBQUM7OztPQUFBO0lBRU0sbUNBQUksR0FBWCxVQUFZLEtBQUs7UUFDZixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFFdkIsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLGdCQUFnQixDQUFDO1FBRXJELElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUM7UUFFOUIsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRU0sd0NBQVMsR0FBaEIsVUFBaUIsS0FBSztRQUNwQixLQUFLLENBQUMsWUFBWSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7UUFFdkMsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLGdCQUFnQixDQUFDO1FBQ3JELElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbEQsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDO1NBQzNCO0lBQ0gsQ0FBQztJQUVNLHVDQUFRLEdBQWYsVUFBZ0IsS0FBSztRQUNuQixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFFdkIsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLGdCQUFnQixDQUFDO1FBQ3JELElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbEQsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNyQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztZQUN2QixLQUFLLENBQUMsWUFBWSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7U0FDeEM7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFTSx3Q0FBUyxHQUFoQixVQUFpQixLQUFLO1FBQ3BCLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDO1FBQzlCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO0lBQzFCLENBQUM7SUFDSCwyQkFBQztBQUFELENBQUMsQUEvQ0QsQ0FBMEMsZUFBZSxHQStDeEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUcmVlRGlhZ3JhbU5vZGUgfSBmcm9tICcuL25vZGUuY2xhc3MnO1xuXG5leHBvcnQgY2xhc3MgVHJlZURpYWdyYW1Ob2RlTWFrZXIgZXh0ZW5kcyBUcmVlRGlhZ3JhbU5vZGUge1xuICBwcml2YXRlIGlzTWFrZXJTdGF0ZSA9IHRydWU7XG5cbiAgcHVibGljIGdldCBpc01ha2VyKCkge1xuICAgIHJldHVybiB0aGlzLmlzTWFrZXJTdGF0ZTtcbiAgfVxuXG4gIHB1YmxpYyBkcm9wKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIGNvbnN0IGd1aWQgPSB0aGlzLmdldFRoaXNOb2RlTGlzdCgpLmRyYWdnaW5nTm9kZUd1aWQ7XG5cbiAgICB0aGlzLmdldFRoaXNOb2RlTGlzdCgpLnJvb3ROb2RlKGd1aWQpO1xuICAgIHRoaXMuZGlzcGxheU5hbWUgPSAnTmV3IG5vZGUnO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcHVibGljIGRyYWdlbnRlcihldmVudCkge1xuICAgIGV2ZW50LmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gJ21vdmUnO1xuXG4gICAgY29uc3QgZ3VpZCA9IHRoaXMuZ2V0VGhpc05vZGVMaXN0KCkuZHJhZ2dpbmdOb2RlR3VpZDtcbiAgICBjb25zdCBub2RlID0gdGhpcy5nZXRUaGlzTm9kZUxpc3QoKS5nZXROb2RlKGd1aWQpO1xuXG4gICAgaWYgKG5vZGUucGFyZW50SWQpIHtcbiAgICAgIHRoaXMuZGlzcGxheU5hbWUgPSAnUm9vdCc7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGRyYWdvdmVyKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIGNvbnN0IGd1aWQgPSB0aGlzLmdldFRoaXNOb2RlTGlzdCgpLmRyYWdnaW5nTm9kZUd1aWQ7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuZ2V0VGhpc05vZGVMaXN0KCkuZ2V0Tm9kZShndWlkKTtcblxuICAgIGlmICghdGhpcy5pc0RyYWdnaW5nICYmIG5vZGUucGFyZW50SWQpIHtcbiAgICAgIHRoaXMuaXNEcmFnb3ZlciA9IHRydWU7XG4gICAgICBldmVudC5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9ICdtb3ZlJztcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgZHJhZ2xlYXZlKGV2ZW50KSB7XG4gICAgdGhpcy5kaXNwbGF5TmFtZSA9ICdOZXcgbm9kZSc7XG4gICAgdGhpcy5pc0RyYWdvdmVyID0gZmFsc2U7XG4gIH1cbn1cbiJdfQ==