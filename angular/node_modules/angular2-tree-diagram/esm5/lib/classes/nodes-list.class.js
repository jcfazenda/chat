import { __values } from "tslib";
import { TreeDiagramNode } from './node.class';
import { TreeDiagramNodeMaker } from './node-maker.class';
var TreeDiagramNodesList = /** @class */ (function () {
    function TreeDiagramNodesList(nodes, config) {
        var _this = this;
        this.config = config;
        this.nodeTemplate = {
            displayName: 'New node',
            children: [],
            guid: '',
            parentId: null
        };
        this.nodesList = new Map();
        nodes.forEach(function (treeNode) {
            _this.nodesList.set(treeNode.guid, new TreeDiagramNode(treeNode, config, _this.getThisNodeList.bind(_this)));
        });
        this.makeRoots();
        this.makerGuid = this.uuidv4();
        var node = {
            guid: this.makerGuid,
            parentId: 'root',
            children: [],
            displayName: 'New node'
        };
        var maker = new TreeDiagramNodeMaker(node, this.config, this.getThisNodeList.bind(this));
        this.nodesList.set(this.makerGuid, maker);
    }
    TreeDiagramNodesList.prototype.values = function () {
        return this.nodesList.values();
    };
    TreeDiagramNodesList.prototype.getNode = function (guid) {
        return this.nodesList.get(guid);
    };
    TreeDiagramNodesList.prototype.rootNode = function (guid) {
        var node = this.getNode(guid);
        var maker = this.getNode(this.makerGuid);
        node.isDragging = false;
        node.isDragover = false;
        if (node.parentId) {
            var parent_1 = this.getNode(node.parentId);
            parent_1.children.delete(guid);
        }
        node.parentId = null;
        this.makeRoots();
        maker.isDragging = false;
        maker.isDragover = false;
    };
    TreeDiagramNodesList.prototype.transfer = function (originId, targetId) {
        var origin = this.getNode(originId);
        var target = this.getNode(targetId);
        origin.isDragover = false;
        origin.isDragging = false;
        target.isDragover = false;
        if (origin.parentId === targetId || originId === targetId) {
            return;
        }
        var remakeRoots = origin.isRoot();
        if (origin.parentId) {
            var parent_2 = this.getNode(origin.parentId);
            parent_2.children.delete(originId);
            if (!parent_2.hasChildren()) {
                parent_2.toggle(false);
            }
        }
        target.children.add(originId);
        origin.parentId = targetId;
        if (remakeRoots) {
            this.makeRoots();
        }
        this.serialize();
    };
    TreeDiagramNodesList.prototype.getThisNodeList = function () {
        return this;
    };
    TreeDiagramNodesList.prototype.toggleSiblings = function (guid) {
        var e_1, _a;
        var _this = this;
        var target = this.getNode(guid);
        if (target.parentId) {
            var parent_3 = this.getNode(target.parentId);
            parent_3.children.forEach(function (nodeGuid) {
                if (nodeGuid === guid) {
                    return;
                }
                _this.getNode(nodeGuid).toggle(false);
            });
        }
        else {
            try {
                for (var _b = __values(this.roots), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var root = _c.value;
                    if (root.guid === guid) {
                        continue;
                    }
                    root.toggle(false);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    TreeDiagramNodesList.prototype.serialize = function () {
        var out = [];
        this.nodesList.forEach(function (node) {
            var json = {
                guid: node.guid,
                displayName: node.displayName,
                parentId: node.parentId,
                children: Array.from(node.children),
            };
            out.push(json);
        });
        return out;
    };
    TreeDiagramNodesList.prototype.destroy = function (guid) {
        var _this = this;
        var target = this.getNode(guid);
        if (target.parentId) {
            var parent_4 = this.getNode(target.parentId);
            parent_4.children.delete(guid);
        }
        if (target.hasChildren()) {
            target.children.forEach(function (child) {
                _this.nodesList.delete(child);
            });
        }
        this.nodesList.delete(guid);
    };
    TreeDiagramNodesList.prototype.newNode = function (parentId) {
        if (parentId === void 0) { parentId = null; }
        var nodeTemplate = Object.assign({}, this.nodeTemplate);
        nodeTemplate.guid = this.uuidv4();
        nodeTemplate.parentId = parentId;
        this.nodesList.set(nodeTemplate.guid, new TreeDiagramNode(nodeTemplate, this.config, this.getThisNodeList.bind(this)));
        this.makeRoots();
        return nodeTemplate.guid;
    };
    TreeDiagramNodesList.prototype.uuidv4 = function () {
        // tslint:disable-next-line:only-arrow-functions
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            // tslint:disable-next-line:one-variable-per-declaration no-bitwise
            var r = (Math.random() * 16) | 0, 
            // tslint:disable-next-line:triple-equals no-bitwise
            v = c == 'x' ? r : (r & 0x3) | 0x8;
            return v.toString(16);
        });
    };
    TreeDiagramNodesList.prototype.makeRoots = function () {
        this.roots = Array.from(this.values()).filter(function (node) {
            return node.isRoot();
        });
    };
    return TreeDiagramNodesList;
}());
export { TreeDiagramNodesList };
//# sourceMappingURL=data:application/json;base64,