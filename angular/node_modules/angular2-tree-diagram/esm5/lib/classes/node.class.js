var TreeDiagramNode = /** @class */ (function () {
    function TreeDiagramNode(props, config, getThisNodeList) {
        this.getThisNodeList = getThisNodeList;
        if (!props.guid) {
            return;
        }
        for (var prop in props) {
            if (props.hasOwnProperty(prop)) {
                this[prop] = props[prop];
            }
        }
        this.toggleState = false;
        if (config.nodeWidth) {
            this.width = config.nodeWidth;
        }
        if (config.nodeHeight) {
            this.height = config.nodeHeight;
        }
        this.children = new Set(props.children);
    }
    Object.defineProperty(TreeDiagramNode.prototype, "isMaker", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeDiagramNode.prototype, "isExpanded", {
        get: function () {
            return this.toggleState;
        },
        enumerable: true,
        configurable: true
    });
    TreeDiagramNode.prototype.destroy = function () {
        this.getThisNodeList().destroy(this.guid);
    };
    TreeDiagramNode.prototype.hasChildren = function () {
        return !!this.children.size;
    };
    TreeDiagramNode.prototype.toggle = function (state) {
        if (state === void 0) { state = !this.toggleState; }
        this.toggleState = state;
        if (state) {
            this.getThisNodeList().toggleSiblings(this.guid);
        }
    };
    TreeDiagramNode.prototype.childrenCount = function () {
        return this.children.size;
    };
    TreeDiagramNode.prototype.isRoot = function () {
        return this.parentId == null;
    };
    TreeDiagramNode.prototype.dragenter = function (event) {
        event.dataTransfer.dropEffect = 'move';
    };
    TreeDiagramNode.prototype.dragleave = function (event) {
        this.isDragover = false;
    };
    TreeDiagramNode.prototype.dragstart = function (event) {
        event.dataTransfer.effectAllowed = 'move';
        this.isDragging = true;
        this.toggle(false);
        this.getThisNodeList().draggingNodeGuid = this.guid;
    };
    TreeDiagramNode.prototype.dragover = function (event) {
        event.preventDefault();
        if (!this.isDragging) {
            this.isDragover = true;
        }
        event.dataTransfer.dropEffect = 'move';
        return false;
    };
    TreeDiagramNode.prototype.dragend = function () {
        this.isDragover = false;
        this.isDragging = false;
    };
    TreeDiagramNode.prototype.drop = function (event) {
        event.preventDefault();
        var guid = this.getThisNodeList().draggingNodeGuid;
        this.getThisNodeList().transfer(guid, this.guid);
        return false;
    };
    TreeDiagramNode.prototype.addChild = function () {
        var newNodeGuid = this.getThisNodeList().newNode(this.guid);
        this.children.add(newNodeGuid);
        this.toggle(true);
    };
    return TreeDiagramNode;
}());
export { TreeDiagramNode };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS5jbGFzcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXIyLXRyZWUtZGlhZ3JhbS8iLCJzb3VyY2VzIjpbImxpYi9jbGFzc2VzL25vZGUuY2xhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7SUFlRSx5QkFDRSxLQUFLLEVBQ0wsTUFBTSxFQUNDLGVBQTJDO1FBQTNDLG9CQUFlLEdBQWYsZUFBZSxDQUE0QjtRQUVsRCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtZQUNmLE9BQU87U0FDUjtRQUVELEtBQUssSUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1lBQ3hCLElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUMxQjtTQUNGO1FBRUQsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFFekIsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztTQUMvQjtRQUVELElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRTtZQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUM7U0FDakM7UUFFRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFvQixDQUFDLENBQUM7SUFDdEQsQ0FBQztJQTlCRCxzQkFBVyxvQ0FBTzthQUFsQjtZQUNFLE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQzs7O09BQUE7SUE4QkQsc0JBQVcsdUNBQVU7YUFBckI7WUFDRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDMUIsQ0FBQzs7O09BQUE7SUFFTSxpQ0FBTyxHQUFkO1FBQ0UsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVNLHFDQUFXLEdBQWxCO1FBQ0UsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7SUFDOUIsQ0FBQztJQUVNLGdDQUFNLEdBQWIsVUFBYyxLQUF5QjtRQUF6QixzQkFBQSxFQUFBLFNBQVMsSUFBSSxDQUFDLFdBQVc7UUFDckMsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFFekIsSUFBSSxLQUFLLEVBQUU7WUFDVCxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNsRDtJQUNILENBQUM7SUFFTSx1Q0FBYSxHQUFwQjtRQUNFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7SUFDNUIsQ0FBQztJQUVNLGdDQUFNLEdBQWI7UUFDRSxPQUFPLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDO0lBQy9CLENBQUM7SUFFTSxtQ0FBUyxHQUFoQixVQUFpQixLQUFLO1FBQ3BCLEtBQUssQ0FBQyxZQUFZLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQztJQUN6QyxDQUFDO0lBRU0sbUNBQVMsR0FBaEIsVUFBaUIsS0FBSztRQUNwQixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztJQUMxQixDQUFDO0lBRU0sbUNBQVMsR0FBaEIsVUFBaUIsS0FBSztRQUNwQixLQUFLLENBQUMsWUFBWSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUM7UUFDMUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztJQUN0RCxDQUFDO0lBRU0sa0NBQVEsR0FBZixVQUFnQixLQUFLO1FBQ25CLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUV2QixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNwQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztTQUN4QjtRQUVELEtBQUssQ0FBQyxZQUFZLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQztRQUN2QyxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFTSxpQ0FBTyxHQUFkO1FBQ0UsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDeEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7SUFDMUIsQ0FBQztJQUVNLDhCQUFJLEdBQVgsVUFBWSxLQUFLO1FBQ2YsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBRXZCLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztRQUVyRCxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRU0sa0NBQVEsR0FBZjtRQUNFLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTlELElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQUNILHNCQUFDO0FBQUQsQ0FBQyxBQXJIRCxJQXFIQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyZWVEaWFncmFtTm9kZXNMaXN0IH0gZnJvbSAnLi9ub2Rlcy1saXN0LmNsYXNzJztcblxuZXhwb3J0IGNsYXNzIFRyZWVEaWFncmFtTm9kZSB7XG4gIHB1YmxpYyBwYXJlbnRJZDogc3RyaW5nIHwgbnVsbDtcbiAgcHVibGljIGd1aWQ6IHN0cmluZztcbiAgcHVibGljIHdpZHRoOiBudW1iZXI7XG4gIHB1YmxpYyBoZWlnaHQ6IG51bWJlcjtcbiAgcHVibGljIGlzRHJhZ292ZXI6IGJvb2xlYW47XG4gIHB1YmxpYyBpc0RyYWdnaW5nOiBib29sZWFuO1xuICBwdWJsaWMgY2hpbGRyZW46IFNldDxzdHJpbmc+O1xuICBwdWJsaWMgZGlzcGxheU5hbWU6IHN0cmluZztcbiAgcHJpdmF0ZSB0b2dnbGVTdGF0ZTogYm9vbGVhbjtcblxuICBwdWJsaWMgZ2V0IGlzTWFrZXIoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvcHMsXG4gICAgY29uZmlnLFxuICAgIHB1YmxpYyBnZXRUaGlzTm9kZUxpc3Q6ICgpID0+IFRyZWVEaWFncmFtTm9kZXNMaXN0XG4gICkge1xuICAgIGlmICghcHJvcHMuZ3VpZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgcHJvcCBpbiBwcm9wcykge1xuICAgICAgaWYgKHByb3BzLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgIHRoaXNbcHJvcF0gPSBwcm9wc1twcm9wXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnRvZ2dsZVN0YXRlID0gZmFsc2U7XG5cbiAgICBpZiAoY29uZmlnLm5vZGVXaWR0aCkge1xuICAgICAgdGhpcy53aWR0aCA9IGNvbmZpZy5ub2RlV2lkdGg7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5ub2RlSGVpZ2h0KSB7XG4gICAgICB0aGlzLmhlaWdodCA9IGNvbmZpZy5ub2RlSGVpZ2h0O1xuICAgIH1cblxuICAgIHRoaXMuY2hpbGRyZW4gPSBuZXcgU2V0KHByb3BzLmNoaWxkcmVuIGFzIHN0cmluZ1tdKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgaXNFeHBhbmRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy50b2dnbGVTdGF0ZTtcbiAgfVxuXG4gIHB1YmxpYyBkZXN0cm95KCkge1xuICAgIHRoaXMuZ2V0VGhpc05vZGVMaXN0KCkuZGVzdHJveSh0aGlzLmd1aWQpO1xuICB9XG5cbiAgcHVibGljIGhhc0NoaWxkcmVuKCkge1xuICAgIHJldHVybiAhIXRoaXMuY2hpbGRyZW4uc2l6ZTtcbiAgfVxuXG4gIHB1YmxpYyB0b2dnbGUoc3RhdGUgPSAhdGhpcy50b2dnbGVTdGF0ZSkge1xuICAgIHRoaXMudG9nZ2xlU3RhdGUgPSBzdGF0ZTtcblxuICAgIGlmIChzdGF0ZSkge1xuICAgICAgdGhpcy5nZXRUaGlzTm9kZUxpc3QoKS50b2dnbGVTaWJsaW5ncyh0aGlzLmd1aWQpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBjaGlsZHJlbkNvdW50KCkge1xuICAgIHJldHVybiB0aGlzLmNoaWxkcmVuLnNpemU7XG4gIH1cblxuICBwdWJsaWMgaXNSb290KCkge1xuICAgIHJldHVybiB0aGlzLnBhcmVudElkID09IG51bGw7XG4gIH1cblxuICBwdWJsaWMgZHJhZ2VudGVyKGV2ZW50KSB7XG4gICAgZXZlbnQuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QgPSAnbW92ZSc7XG4gIH1cblxuICBwdWJsaWMgZHJhZ2xlYXZlKGV2ZW50KSB7XG4gICAgdGhpcy5pc0RyYWdvdmVyID0gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgZHJhZ3N0YXJ0KGV2ZW50KSB7XG4gICAgZXZlbnQuZGF0YVRyYW5zZmVyLmVmZmVjdEFsbG93ZWQgPSAnbW92ZSc7XG4gICAgdGhpcy5pc0RyYWdnaW5nID0gdHJ1ZTtcbiAgICB0aGlzLnRvZ2dsZShmYWxzZSk7XG4gICAgdGhpcy5nZXRUaGlzTm9kZUxpc3QoKS5kcmFnZ2luZ05vZGVHdWlkID0gdGhpcy5ndWlkO1xuICB9XG5cbiAgcHVibGljIGRyYWdvdmVyKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmICghdGhpcy5pc0RyYWdnaW5nKSB7XG4gICAgICB0aGlzLmlzRHJhZ292ZXIgPSB0cnVlO1xuICAgIH1cblxuICAgIGV2ZW50LmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gJ21vdmUnO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHB1YmxpYyBkcmFnZW5kKCkge1xuICAgIHRoaXMuaXNEcmFnb3ZlciA9IGZhbHNlO1xuICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xuICB9XG5cbiAgcHVibGljIGRyb3AoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgY29uc3QgZ3VpZCA9IHRoaXMuZ2V0VGhpc05vZGVMaXN0KCkuZHJhZ2dpbmdOb2RlR3VpZDtcblxuICAgIHRoaXMuZ2V0VGhpc05vZGVMaXN0KCkudHJhbnNmZXIoZ3VpZCwgdGhpcy5ndWlkKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgYWRkQ2hpbGQoKSB7XG4gICAgY29uc3QgbmV3Tm9kZUd1aWQgPSB0aGlzLmdldFRoaXNOb2RlTGlzdCgpLm5ld05vZGUodGhpcy5ndWlkKTtcblxuICAgIHRoaXMuY2hpbGRyZW4uYWRkKG5ld05vZGVHdWlkKTtcbiAgICB0aGlzLnRvZ2dsZSh0cnVlKTtcbiAgfVxufVxuIl19