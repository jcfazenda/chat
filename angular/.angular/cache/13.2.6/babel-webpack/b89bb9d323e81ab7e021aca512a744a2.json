{"ast":null,"code":"import { throwError, Observable } from 'rxjs';\nimport { NotificationsService } from 'angular2-notifications';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { GenericsService } from '../api/services/generics.service';\nimport { StorageService } from './services/storage.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"angular2-notifications\";\nimport * as i3 from \"../api/services/generics.service\";\nimport * as i4 from \"./services/storage.service\";\nexport let ConnectionService = /*#__PURE__*/(() => {\n  class ConnectionService {\n    constructor(http, _notifications, genericsService, storageService) {\n      this.http = http;\n      this._notifications = _notifications;\n      this.genericsService = genericsService;\n      this.storageService = storageService;\n      this.CodeApi = 0;\n      this.Usuario = JSON.parse(localStorage.getItem('currentUser'));\n      /*\n         this.storageService.SetDataBaseAmbiente(null);\n         this.storageService.SetAmbienteAPI(null, null);\n         this.storageService.setCliente(null);\n      */\n\n      /* AMBIENTE: HML - PROD - DEV */\n\n      if (JSON.parse(localStorage.getItem('database_ambiente')) === null) {\n        this.storageService.SetDataBaseAmbiente(genericsService.HTTPConnection().api);\n      }\n\n      if (JSON.parse(localStorage.getItem('database_ambiente_api_client')) === null) {\n        this.storageService.SetAmbienteAPI(genericsService.HTTPConnection().api.filter(x => x.active === true)[0], genericsService.HTTPConnection().client.filter(x => x.active === true)[0]);\n        this.Client = genericsService.HTTPConnection().client.filter(x => x.active === true)[0];\n        this.Api = genericsService.HTTPConnection().api.filter(x => x.active === true)[0];\n        this.Hub = genericsService.HTTPConnection().api.filter(x => x.active === true)[0];\n      } else if (JSON.parse(localStorage.getItem('database_ambiente_api_client')) !== null) {\n        this.Client = JSON.parse(localStorage.getItem('database_ambiente_api_client'));\n        this.Api = JSON.parse(localStorage.getItem('database_ambiente_api'));\n        this.Hub = JSON.parse(localStorage.getItem('database_ambiente_api_hub'));\n      }\n    }\n    /* API */\n\n\n    post_api_tenant(cliente_Database, path, body = {}) {\n      let Rota = JSON.parse(localStorage.getItem('accessCliente'));\n\n      if (Rota === null) {\n        Rota = {\n          cliente_Database: 'grc_client'\n        };\n      }\n\n      let rota = this.Api.url + (cliente_Database + '-' + this.Client.name) + '/api/';\n      return this.http.post(`${rota.trim()}${path}`, JSON.stringify(body), {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).pipe(catchError(err => this.formatErrors(err, this._notifications)));\n    }\n\n    post_api(path, body = {}) {\n      let Rota = JSON.parse(localStorage.getItem('accessCliente'));\n\n      if (Rota === null) {\n        Rota = {\n          cliente_Database: 'grc_client'\n        };\n      }\n\n      let rota = this.Api.url + (Rota.cliente_Database + '-' + this.Client.name) + '/api/';\n      return this.http.post(`${rota.trim()}${path}`, JSON.stringify(body), {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).pipe(catchError(err => this.formatErrors(err, this._notifications)));\n    }\n\n    post_client(path, body = {}) {\n      let Rota = JSON.parse(localStorage.getItem('accessCliente'));\n\n      if (Rota === null) {\n        Rota = {\n          cliente_Database: 'grc_client'\n        };\n      }\n\n      let rota = this.Client.url + (Rota.cliente_Database + '-' + this.Client.name) + '/api/';\n      return this.http.post(`${rota.trim()}${path}`, JSON.stringify(body), {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).pipe(catchError(err => this.formatErrors(err, this._notifications)));\n    }\n\n    formatErrors(error, _notifications) {\n      this.showErrors(error, _notifications);\n      return throwError(error.error);\n    }\n\n    showErrors(error, _notifications) {\n      let errorMsg = '';\n\n      switch (error.status) {\n        case 401:\n          errorMsg = '401 - Unauthorized';\n          break;\n\n        case 403:\n          errorMsg = '403 - Forbidden';\n          break;\n\n        case 504:\n          errorMsg = '504 - Timeout';\n          break;\n\n        default:\n          if (error.error && error.error.errors && error.error.errors.length > 0) {\n            error.error.errors.forEach(element => {\n              errorMsg += element + '; ';\n            });\n          }\n\n          break;\n      }\n\n      if (errorMsg) {}\n    }\n\n  }\n\n  ConnectionService.ɵfac = function ConnectionService_Factory(t) {\n    return new (t || ConnectionService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NotificationsService), i0.ɵɵinject(i3.GenericsService), i0.ɵɵinject(i4.StorageService));\n  };\n\n  ConnectionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConnectionService,\n    factory: ConnectionService.ɵfac\n  });\n  return ConnectionService;\n})();","map":null,"metadata":{},"sourceType":"module"}